// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AssignedordersStatus string

const (
	AssignedordersStatusPending  AssignedordersStatus = "pending"
	AssignedordersStatusAccepted AssignedordersStatus = "accepted"
	AssignedordersStatusDeclined AssignedordersStatus = "declined"
)

func (e *AssignedordersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AssignedordersStatus(s)
	case string:
		*e = AssignedordersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AssignedordersStatus: %T", src)
	}
	return nil
}

type NullAssignedordersStatus struct {
	AssignedordersStatus AssignedordersStatus
	Valid                bool // Valid is true if AssignedordersStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAssignedordersStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AssignedordersStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AssignedordersStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAssignedordersStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AssignedordersStatus), nil
}

type OrdersStatus string

const (
	OrdersStatusPending   OrdersStatus = "pending"
	OrdersStatusAccepted  OrdersStatus = "accepted"
	OrdersStatusInTransit OrdersStatus = "in_transit"
	OrdersStatusDelivered OrdersStatus = "delivered"
	OrdersStatusCanceled  OrdersStatus = "canceled"
)

func (e *OrdersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrdersStatus(s)
	case string:
		*e = OrdersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrdersStatus: %T", src)
	}
	return nil
}

type NullOrdersStatus struct {
	OrdersStatus OrdersStatus
	Valid        bool // Valid is true if OrdersStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrdersStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrdersStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrdersStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrdersStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrdersStatus), nil
}

type UsersRole string

const (
	UsersRoleBusinessOwner UsersRole = "business_owner"
	UsersRoleCourier       UsersRole = "courier"
	UsersRoleAdmin         UsersRole = "admin"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole
	Valid     bool // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type Assignedorder struct {
	AssignID   int32
	OrderID    int32
	CourierID  int32
	AssignedAt sql.NullTime
	Status     NullAssignedordersStatus
}

type Order struct {
	OrderID         int32
	UserID          int32
	PickupLocation  string
	DropoffLocation string
	PackageDetails  string
	DeliveryTime    sql.NullTime
	Status          NullOrdersStatus
	CreatedAt       sql.NullTime
}

type User struct {
	UserID   int32
	Name     string
	Email    string
	Phone    string
	Password string
	Role     UsersRole
}
