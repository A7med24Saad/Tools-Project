// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execresult
 INSERT INTO users (name, email, phone, password, role)
  VALUES (
    ?, ?, ?, ?, ?
  )
`

type CreateAuthorParams struct {
	Name     string
	Email    string
	Phone    string
	Password string
	Role     UsersRole
}

// INSERT INTO Users (
//
//	name, bio
//
// ) VALUES (
//
//	?, ?
//
// );
func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.Role,
	)
}

const listAuthors = `-- name: ListAuthors :many
SELECT user_id, name, email, phone, password, role FROM users
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Password,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
